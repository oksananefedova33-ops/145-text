// /ui/text-beautify/gpt-api.js (v2 - —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–æ–ª—å—à–∏—Ö –æ–±—ä—ë–º–æ–≤)

window.TextBeautifyGPT = {
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  maxDirectSize: 15000, // 15 KB
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
  async hasToken() {
    try {
      const r = await fetch('/editor/text_beautify_api.php?action=getToken', {
        cache: 'no-store'
      });
      const j = await r.json();
      return j.ok && j.token && j.token.length > 10;
    } catch(e) {
      console.error('Error checking token:', e);
      return false;
    }
  },
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ
  async saveToken(token) {
    if (!token || token.length < 10) {
      return { ok: false, error: '–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤' };
    }
    
    const fd = new FormData();
    fd.append('action', 'saveToken');
    fd.append('token', token);
    
    try {
      const r = await fetch('/editor/text_beautify_api.php', {
        method: 'POST',
        body: fd
      });
      const j = await r.json();
      
      if (j.ok) {
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
        return { ok: true, message: '–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ!' };
      }
      return { ok: false, error: j.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' };
    } catch(e) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', e);
      return { ok: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏' };
    }
  },
  
  // –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω
  async deleteToken() {
    const fd = new FormData();
    fd.append('action', 'deleteToken');
    
    try {
      const r = await fetch('/editor/text_beautify_api.php', {
        method: 'POST',
        body: fd
      });
      const j = await r.json();
      return j.ok;
    } catch(e) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', e);
      return false;
    }
  },
  
  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞
  async beautify(html, style = 'modern') {
    if (!html || html.length === 0) {
      return { ok: false, error: 'HTML –ø—É—Å—Ç' };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
    const size = html.length;
    
    if (size > 500000) {
      // –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç - –Ω—É–∂–Ω–æ —á–∞–Ω–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      return this.beautifyChunked(html, style);
    } else if (size > this.maxDirectSize) {
      // –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä - –æ—Ç–ø—Ä–∞–≤–∏–º —Ü–µ–ª–∏–∫–æ–º, –Ω–æ API —Å–∞–º —á–∞–Ω–∫–∏—Ä—É–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      return this.beautifyLarge(html, style);
    } else {
      // –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      return this.beautifyDirect(html, style);
    }
  },
  
  // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  async beautifyDirect(html, style) {
    const fd = new FormData();
    fd.append('action', 'beautify');
    fd.append('html', html);
    fd.append('style', style);
    
    try {
      const r = await fetch('/editor/text_beautify_api.php', {
        method: 'POST',
        body: fd,
        timeout: 60000
      });
      
      if (!r.ok) {
        return { ok: false, error: `HTTP ${r.status}` };
      }
      
      const j = await r.json();
      
      if (j.ok && j.beautified) {
        return { ok: true, html: j.beautified };
      } else {
        return { ok: false, error: j.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' };
      }
    } catch(e) {
      console.error('–û—à–∏–±–∫–∞ beautify:', e);
      return { ok: false, error: '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ' + e.message };
    }
  },
  
  // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (—Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–∞–Ω–∫–∏—Ä—É–µ—Ç)
  async beautifyLarge(html, style) {
    console.log(`üìä –ë–æ–ª—å—à–æ–π –¥–æ–∫—É–º–µ–Ω—Ç (${Math.round(html.length / 1024)} KB), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä...`);
    
    const fd = new FormData();
    fd.append('action', 'beautify');
    fd.append('html', html);
    fd.append('style', style);
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Blob –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
      const blob = new Blob([fd], { type: 'application/x-www-form-urlencoded' });
      
      const r = await fetch('/editor/text_beautify_api.php', {
        method: 'POST',
        body: fd,
        timeout: 180000 // 3 –º–∏–Ω—É—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      });
      
      if (!r.ok) {
        return { ok: false, error: `HTTP ${r.status}` };
      }
      
      const j = await r.json();
      
      if (j.ok && j.beautified) {
        const info = j.chunks ? ` (${j.chunks} –±–ª–æ–∫–æ–≤)` : '';
        return { 
          ok: true, 
          html: j.beautified,
          note: j.note || `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ${info}`
        };
      } else {
        return { ok: false, error: j.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
      }
    } catch(e) {
      console.error('–û—à–∏–±–∫–∞ beautifyLarge:', e);
      return { ok: false, error: '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ' + e.message };
    }
  },
  
  // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –û–ß–ï–ù–¨ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ - —á–∞–Ω–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  async beautifyChunked(html, style) {
    console.log(`‚öôÔ∏è –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π –¥–æ–∫—É–º–µ–Ω—Ç (${Math.round(html.length / 1024)} KB), —á–∞–Ω–∫–∏—Ä—É–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ...`);
    
    const chunkSize = 50000; // 50 KB —á–∞–Ω–∫–∏
    const chunks = [];
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏
    const parsed = this.smartChunkHTML(html, chunkSize);
    
    console.log(`üì¶ –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${parsed.length} —á–∞–Ω–∫–æ–≤`);
    
    const styledChunks = [];
    
    for (let i = 0; i < parsed.length; i++) {
      const chunk = parsed[i];
      
      console.log(`Processing chunk ${i + 1}/${parsed.length}...`);
      
      const result = await this.beautifyDirect(chunk, style);
      
      if (result.ok) {
        styledChunks.push(result.html);
      } else {
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞–Ω–∫
        console.warn(`–û—à–∏–±–∫–∞ –Ω–∞ —á–∞–Ω–∫–µ ${i + 1}:`, result.error);
        styledChunks.push(chunk);
      }
      
      // Delay –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
      if (i < parsed.length - 1) {
        await new Promise(r => setTimeout(r, 1000));
      }
    }
    
    return {
      ok: true,
      html: styledChunks.join(''),
      chunks: styledChunks.length,
      note: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${styledChunks.length} –±–ª–æ–∫–æ–≤`
    };
  },
  
  // –£–º–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ HTML –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏
  smartChunkHTML(html, maxSize) {
    const chunks = [];
    let currentChunk = '';
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–∏—Ç—å –ø–æ —Ç–µ–≥–∞–º
    const tagPattern = /<(div|section|article|p|blockquote)[^>]*>[\s\S]*?<\/\1>/gi;
    let match;
    const tagMatches = [];
    
    while ((match = tagPattern.exec(html)) !== null) {
      tagMatches.push({ start: match.index, end: match.index + match[0].length });
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (tagMatches.length > 1) {
      let start = 0;
      
      for (const tag of tagMatches) {
        const size = tag.end - start;
        
        if (size > maxSize && currentChunk) {
          chunks.push(currentChunk);
          currentChunk = '';
        }
        
        currentChunk += html.substring(start, tag.end);
        start = tag.end;
      }
      
      if (currentChunk) chunks.push(currentChunk);
    } else {
      // –ï—Å–ª–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –±–ª–æ–∫–æ–≤ –Ω–µ—Ç - –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
      for (let i = 0; i < html.length; i += maxSize) {
        let chunk = html.substring(i, i + maxSize);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–µ —Ä–∞–∑–±–∏–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ç–µ–≥–∞
        const lastTagClose = chunk.lastIndexOf('</');
        if (lastTagClose !== -1 && i + maxSize < html.length) {
          const nextTagClose = chunk.indexOf('>', lastTagClose);
          if (nextTagClose !== -1) {
            chunk = chunk.substring(0, nextTagClose + 1);
          }
        }
        
        if (chunk) chunks.push(chunk);
      }
    }
    
    return chunks.filter(c => c.trim().length > 0);
  },
  
  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  async getStatus() {
    try {
      const hasToken = await this.hasToken();
      return {
        ready: hasToken,
        message: hasToken ? '–ì–æ—Ç–æ–≤–æ –∫ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏' : '–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ OpenAI'
      };
    } catch(e) {
      return { ready: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏' };
    }
  }
};